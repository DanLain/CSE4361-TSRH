/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uta.tsrh.db.commandpattern;

import com.mysql.jdbc.Connection;
import edu.uta.tsrh.RoleManagement.IRoleResource;
import edu.uta.tsrh.db.DAO;
import edu.uta.tsrh.db.DBQueryExecuter;
import edu.uta.tsrh.db.MySQLDBServices;
import edu.uta.tsrh.db.mapper.Mapper;
import edu.uta.tsrh.db.mapper.UserMapper;
import edu.uta.tsrh.model.Resources;
import edu.uta.tsrh.model.RoleResourceRights;
import edu.uta.tsrh.model.User;
import java.sql.ResultSet;
import java.util.ArrayList;

/**
 *
 * @author madhuri
 */
public  class Component implements IRoleResource {

    /**
     *
     * @param resource
     */
    @Override
    public void createResource(Resources resource) {
        if (resource.getResourceName() != null && resource.getResourceURL() != null) {

            String sqlQuery = buildQuery1(resource);
            System.out.println("query is " + sqlQuery);
            Connection connection = DAO.getConnection();
            DBQueryExecuter queryExecuter = new DBQueryExecuter();
            int success = queryExecuter.modify(sqlQuery, connection);
            System.out.println("Is inserted");
            DAO.closeConnection();

        }

    }

    private String buildQuery1(Resources resource) {

        String Query = "Insert into resources(resourceName,resourceURL) values ('" + resource.resourceName + "','" + resource.resourceURL + "')";
        return Query;
    }
    
    /**
     * 
     * @param user
     * @param resource
     * @return 
     */
    @Override
    public boolean isResourceread(User user, Resources resource) {

        int roleId = getRoleId(user);
        int resourceId = getResourceId(resource);
        
        String sqlQuery = buildQuery4(roleId, resourceId);
        System.out.println("query is " + sqlQuery);
        Connection connection = DAO.getConnection();
        DBQueryExecuter queryExecuter = new DBQueryExecuter();
        ResultSet resultSet = queryExecuter.read(sqlQuery, connection);
        int readEdit = -1;
                
        try{
            while(resultSet.next()){
            readEdit = resultSet.getInt("readEdit");
            
            }
            
        }catch(Exception e){
            e.printStackTrace();
            
        }
        
        DAO.closeConnection();
        
        if(readEdit == -1 || readEdit==0){
            return true;
            //System.out.println("read "+readEdit);
        }else{
            return false;
            //System.out.println("not a readright and read edit is  "+readEdit);
            
        }
        //return null;
            

    }
    
        private String buildQuery4(int roleId, int resourceId) {

        String query = "select readEdit FROM roleresourcerights rr where rr.roleId=" + roleId + " AND rr.resourceId=" + resourceId +";";
        return query;

    }

    
    public int getRoleId(User user) {

        String sqlQuery = buildQuery2(user);
        System.out.println("query is " + sqlQuery);
        Connection connection = DAO.getConnection();
        
        DBQueryExecuter queryExecuter = new DBQueryExecuter();
        ResultSet resultSet = queryExecuter.read(sqlQuery, connection);
        int roleId = 0;
        try{
            
            while(resultSet.next()){
                 roleId = resultSet.getInt("roleId");
                 System.out.println(roleId);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
       
        DAO.closeConnection();

        return roleId;
    }

    private String buildQuery2(User user) {

        String roid = "select roleId from user u where u.userName='" + user.userName + "'";
        return roid;
    }

    /**
     * 
     * @param resource
     * @return 
     */
    public int getResourceId(Resources resource) {

        String sqlQuery = buildQuery3(resource);
        System.out.println("query is " + sqlQuery);
        Connection connection = DAO.getConnection();
        DBQueryExecuter queryExecuter = new DBQueryExecuter();
        ResultSet resultSet = queryExecuter.read(sqlQuery, connection);
        int resourceId = 0;
        try{
            
            while(resultSet.next()){
                 resourceId = Integer.parseInt(resultSet.getString("resourceId"));
                 System.out.println(resourceId);
            }
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        DAO.closeConnection();

        return resourceId;
    }

    private String buildQuery3(Resources resource) {


        String rsid = "select resourceId from resources res where res.resourceName='" + resource.resourceName + "'";
        return rsid;

    }
   
    public boolean isResourcewrite(User user, Resources resource) {

       int roleId = getRoleId(user);
        int resourceId = getResourceId(resource);
        
        String sqlQuery = buildQuery(roleId, resourceId);
        System.out.println("query is " + sqlQuery);
        Connection connection = DAO.getConnection();
        DBQueryExecuter queryExecuter = new DBQueryExecuter();
        ResultSet resultSet = queryExecuter.read(sqlQuery, connection);
        int readEdit = -1;
                
        try{
            while(resultSet.next()){
                readEdit = resultSet.getInt("readEdit");
            }
            
        }catch(Exception e){
            e.printStackTrace();
            
        }
        
        DAO.closeConnection();
        
        if(readEdit == -1 || readEdit==1){
            return true;
            //System.out.println("write "+readEdit);
        }else{
            return false;
           // System.out.println("not a write right.read edit is  "+readEdit);
        }
        //return null;

    }

     private String buildQuery(int roleId, int resourceId) {

        String query = "select readEdit FROM roleresourcerights rr where rr.roleId=" + roleId + " AND rr.resourceId=" + resourceId +";";
        return query;

    }

    @Override
    public ArrayList<String> getResourceListForUser(User user) {
       
        String sqlQuery = buildQuery6(user);
        System.out.println("query is " + sqlQuery);
        Connection connection = DAO.getConnection();
        DBQueryExecuter queryExecuter = new DBQueryExecuter();
        ResultSet resultSet = queryExecuter.read(sqlQuery, connection);
        ArrayList<String> resourceList=new ArrayList<String>();
        try{
            int i=0;
                 while(resultSet.next()){
                     resourceList.add(resultSet.getString("resourceName"));
                    System.out.println("resource names "+resourceList.get(i));
                 i++;
                 }  
                 
                                 
        }
catch(Exception e)
{
            e.printStackTrace();
 }
        DAO.closeConnection();
        return resourceList;
        
    }

    private String buildQuery6(User user) {
    String Query = "SELECT res.resourceName from resources res LEFT JOIN roleresourcerights ON res.resourceId = roleresourcerights.resourceId LEFT JOIN user ON roleresourcerights.roleId = user.roleId where user.userName = '" + user.userName + "'";
     
    return Query;
    }
}
